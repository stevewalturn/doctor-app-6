{
  "package_name": "com.walturn.my_app",
  "project_description": "The Flutter application is built using the Stacked architecture and features routing, dependency injection, and management of dialogs and bottom sheets. It includes a home screen with a counter, the ability to display custom dialogs and bottom sheets, and initial startup logic. The application also integrates with analytics tracking and supports multiple app flavors (development and production).",
  "architecture_overview": "The application follows the Stacked architecture, which separates the app structure, features, UI components, and utilities into distinct folders. It utilizes Stacked for state management, routing, and dependency injection. The app.dart file defines the overall app structure, including routes, services, bottom sheets, and dialogs. The app.bottomsheets.dart and app.dialogs.dart files manage the configuration and registration of custom bottom sheets and dialogs, respectively. The app.router.dart file is responsible for defining and managing the navigation routes within the application.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This file is responsible for setting up and configuring the bottom sheet UI in the application. It defines the different types of bottom sheets that can be used and provides a central location for registering the bottom sheet builders.",
      "class_diagram": "@startuml\nclass BottomSheetService {\n  +setCustomSheetBuilders(Map<BottomSheetType, SheetBuilder>)\n}\n\nclass NoticeSheet {\n  +NoticeSheet(BottomSheetRequest request, Function(SheetResponse) completer)\n}\n\nenum BottomSheetType {\n  notice\n}\n\nBottomSheetService *-- BottomSheetType\nBottomSheetService *-- NoticeSheet\n@enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "This method sets up the bottom sheet service with the custom sheet builders for each bottom sheet type. It registers the NoticeSheet builder for the 'notice' bottom sheet type.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for setting up the dialog management system in the application. It defines the available dialog types, registers custom dialog builders, and ensures the dialog service is properly configured for use throughout the app.",
      "class_diagram": "@startuml\n\nclass DialogType {\n  infoAlert\n}\n\nclass DialogBuilder {\n  InfoAlertDialog(request, completer)\n}\n\nclass DialogService {\n  registerCustomDialogBuilders(builders)\n}\n\nDialogType *-- DialogBuilder\nDialogService o-- DialogBuilder\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "Configures the dialog service by registering custom dialog builders for the available dialog types.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "my_app/app/app.locator.dart",
        "my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/l10n/supported_locales.dart",
      "description": "This file is responsible for managing the supported locales and localization delegates for the Flutter application. It provides a centralized location to define the list of supported locales and the delegates responsible for handling the localization of the app's user interface.",
      "class_diagram": "@startuml\n'Suppress \"from ... import\" warnings\nset namespaceSeparator none\n\nclass SupportedLocales {\n  +List<LocalizationsDelegate<dynamic>> get localizationsDelegates\n  +List<Locale> get supportedLocales\n}\n@enduml",
      "methods": [
        {
          "name": "localizationsDelegates",
          "description": "Returns the list of localization delegates used by the application to handle the translation and formatting of the user interface based on the selected locale.",
          "parameters": null,
          "return_type": "List<LocalizationsDelegate<dynamic>>"
        },
        {
          "name": "supportedLocales",
          "description": "Returns the list of locales that the application supports and can be used to display the user interface.",
          "parameters": null,
          "return_type": "List<Locale>"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/main/bootstrap.dart",
      "description": "The `bootstrap.dart` file is responsible for initializing and bootstrapping the Flutter application. It sets up the necessary dependencies, configurations, and entry point for the app to run.",
      "class_diagram": "",
      "methods": [
        {
          "name": "bootstrap",
          "description": "The main entry point that initializes the Flutter app. It sets up the flavor, orientation, and global services required for the app to function.",
          "parameters": [
            "builder",
            "flavor"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "my_app/app/app.bottomsheets.dart",
        "my_app/app/app.dialogs.dart",
        "my_app/app/app.locator.dart",
        "my_app/models/enums/flavor.dart",
        "my_app/utils/flavors/flavors.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for defining and managing the navigation routes within the Flutter application. It is generated using the StackedNavigatorGenerator from the stacked package, which provides a robust and flexible navigation solution for Flutter apps.",
      "class_diagram": "@startuml\n\nclass StackedRouter {\n  +List<RouteDef> get routes\n  +Map<Type, StackedRouteFactory> get pagesMap\n}\n\nclass Routes {\n  +static const String homeView\n  +static const String startupView\n  +static const Set<String> all\n}\n\nclass NavigatorStateExtension {\n  +Future<dynamic> navigateToHomeView()\n  +Future<dynamic> navigateToStartupView()\n  +Future<dynamic> replaceWithHomeView()\n  +Future<dynamic> replaceWithStartupView()\n}\n\n@enduml",
      "methods": [
        {
          "name": "Routes",
          "description": "A static class that defines the available routes in the application.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "StackedRouter",
          "description": "The main router class that manages the navigation in the application. It defines the list of available routes and the corresponding page factories.",
          "parameters": null,
          "return_type": null
        },
        {
          "name": "NavigatorStateExtension",
          "description": "An extension on the NavigationService that provides convenient methods to navigate to and replace the current view with the defined routes.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/views/home/home_view.dart",
        "my_app/ui/views/startup/startup_view.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/main_development.dart",
      "description": "This Dart file is responsible for bootstrapping the development version of the main application. It serves as the entry point for the development environment and sets up the necessary configuration to run the application.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main function that is executed when the application is launched. It calls the bootstrap function to initialize the application with the development flavor.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/models/enums/flavor.dart",
      "description": "This Dart file defines an 'Flavor' enum that represents the different flavors or environments of the application, such as 'production' and 'development'.",
      "class_diagram": "@startuml\nenum Flavor {\n  production\n  development\n}\n@enduml",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/services/analytic_service.dart",
      "description": "The AnalyticService class is a wrapper for an analytics implementation that encapsulates the details of the analytics solution. It provides a consistent and unified interface for interacting with the analytics system, abstracting away the underlying complexity and implementation details.",
      "class_diagram": "@startuml\nclass AnalyticService {\n  + init(): Future<void>\n}\nclass InitializableDependency {\n  + init(): Future<void>\n}\nAnalyticService -up-|> InitializableDependency\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the AnalyticService, ensuring that the underlying analytics implementation is properly set up and ready for use.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:stacked/stacked_annotations.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "The `NoticeSheet` class is responsible for displaying a bottom sheet with a notice or alert message to the user. It provides a simple and consistent way to present important information or notifications to the user within the app's user interface.",
      "class_diagram": "@startuml\nclass NoticeSheet {\n  + NoticeSheet({required completer, required request})\n  + builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  + viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel {\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the notice bottom sheet, displaying the title and description provided in the `SheetRequest`.",
          "parameters": [
            "BuildContext",
            "NoticeSheetModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `NoticeSheetModel`, which is used to manage the state and behavior of the notice bottom sheet.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "flutter/material.dart",
        "my_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "my_app/ui/common/app_colors.dart",
        "my_app/ui/common/ui_helpers.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main/main_production.dart",
      "description": "This Dart file is responsible for bootstrapping the production version of the application. It sets up the necessary environment and initializes the main app view, ensuring the application is ready to run in a production environment.",
      "class_diagram": "",
      "methods": [
        {
          "name": "main",
          "description": "The main entry point of the application. It calls the `bootstrap` function, which sets up the production environment and renders the `AppView` as the root of the application.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/main/bootstrap.dart",
        "package:my_app/models/enums/flavor.dart",
        "package:my_app/ui/views/app/app_view.dart"
      ]
    },
    {
      "name": "lib/observer/screen_observer.dart",
      "description": "The ScreenObserver is a NavigatorObserver that tracks the screen views of the application using the AnalyticService. It is responsible for monitoring the navigation flow and reporting screen view events to the analytics service.",
      "class_diagram": "@startuml\nclass ScreenObserver extends NavigatorObserver {\n  - _trackScreenView(Route<dynamic> route)\n  + didPush(Route<dynamic> route, Route<dynamic>? previousRoute)\n  + didReplace({Route<dynamic>? newRoute, Route<dynamic>? oldRoute})\n  + didPop(Route<dynamic> route, Route<dynamic>? previousRoute)\n}\n\nclass AnalyticService {\n  + trackScreen(String screenName)\n}\n\nScreenObserver --> AnalyticService\n@enduml",
      "methods": [
        {
          "name": "didPush",
          "description": "Tracks the screen view when a new route is pushed onto the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didReplace",
          "description": "Tracks the screen view when a route is replaced in the navigation stack.",
          "parameters": [
            "Route<dynamic>? newRoute",
            "Route<dynamic>? oldRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "didPop",
          "description": "Tracks the screen view when a route is popped from the navigation stack.",
          "parameters": [
            "Route<dynamic> route",
            "Route<dynamic>? previousRoute"
          ],
          "return_type": "void"
        },
        {
          "name": "_trackScreenView",
          "description": "Extracts the screen name from the route settings and sends it to the AnalyticService for tracking.",
          "parameters": [
            "Route<dynamic> route"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "my_app/services/analytic_service.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "This Dart file defines the `NoticeSheetModel` class, which is a view model for a bottom sheet component responsible for displaying a notice or alert to the user.",
      "class_diagram": "",
      "methods": [
        {
          "name": "NoticeSheetModel",
          "description": "The constructor for the `NoticeSheetModel` class, which extends the `BaseViewModel` from the `stacked` package.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of consistent color constants that are used throughout the application's user interface. It provides a centralized location to manage the app's primary, secondary, and accent colors, as well as various shades of grey used for backgrounds, text, and other UI elements.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "This file defines the `InfoAlertDialog` class, which is responsible for displaying an information alert dialog in the application. The dialog includes a title, a description, and a visual graphic, and provides a 'Got it' button for the user to acknowledge and dismiss the alert.",
      "class_diagram": "@startuml\n\nclass InfoAlertDialog {\n  + InfoAlertDialog(request, completer)\n  + builder(context, viewModel, child): Widget\n  + viewModelBuilder(context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog -down-> InfoAlertDialogModel: uses\nInfoAlertDialog -down-> Dialog: renders\n\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the InfoAlertDialog, including the title, description, and 'Got it' button.",
          "parameters": [
            "context",
            "viewModel",
            "child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides an instance of the InfoAlertDialogModel to be used by the InfoAlertDialog.",
          "parameters": [
            "context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/ui/common/app_colors.dart",
        "package:my_app/ui/common/ui_helpers.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog_model.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and behavior of an information alert dialog in a Flutter application. The primary purpose of this class is to provide a reusable, view model-based architecture for displaying informative dialogs to users.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_view.dart",
      "description": "The `AppView` class is the main entry point for the Flutter application. It is responsible for setting up the overall structure and configuration of the app, including the navigation, localization, and other core functionality.",
      "class_diagram": "@startuml\nclass AppView {\n  +build(context, viewModel): Widget\n}\n\nclass _App {\n  +build(context, viewModel): Widget\n}\n\nAppView o-- _App\nAppView *-- AppViewModel\n_App *-- StackedRouter\n_App *-- StackedService\n_App *-- ScreenObserver\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the `AppView` widget, which sets up the overall application structure and configuration.",
          "parameters": [
            "context",
            "viewModel"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:my_app/app/app.router.dart",
        "package:my_app/l10n/supported_locales.dart",
        "package:my_app/observer/screen_observer.dart",
        "package:my_app/ui/views/app/app_viewmodel.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/app/app_viewmodel.dart",
      "description": "The AppViewModel class is responsible for managing the core state and functionality of the app's main view. It serves as the ViewModel component in the MVVM (Model-View-ViewModel) architectural pattern, providing the necessary data and logic to power the app's main user interface.",
      "class_diagram": "@startuml\nclass AppViewModel {\n  +void init()\n  +void navigateToSettings()\n  +void logout()\n}\n@enduml",
      "methods": [
        {
          "name": "init",
          "description": "Initializes the app's state and prepares the ViewModel for rendering the main view.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "navigateToSettings",
          "description": "Handles the navigation to the app's settings view.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "logout",
          "description": "Handles the user's logout process, including clearing session data and navigating to the login screen.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_view.dart",
      "description": "The `HomeView` class is responsible for rendering the main user interface (UI) of the home screen in the Flutter application. It serves as the primary entry point for the user to interact with the core functionality of the app.",
      "class_diagram": "@startuml\nclass HomeView {\n  +builder(BuildContext, HomeViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): HomeViewModel\n}\n\nclass HomeViewModel {\n  +incrementCounter(): void\n  +showDialog(): void\n  +showBottomSheet(): void\n  +counterLabel: String\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI of the home screen, including a title, a button to increment a counter, and buttons to show a dialog and a bottom sheet.",
          "parameters": [
            "BuildContext",
            "HomeViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `HomeViewModel`, which holds the business logic and state management for the home screen.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "HomeViewModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/home/home_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/ui/views/home/home_viewmodel.dart",
      "description": "The HomeViewModel class is responsible for managing the state and functionality of the home screen in the application. It provides the main business logic and user interactions for the home view.",
      "class_diagram": "@startuml\nclass HomeViewModel {\n  +String get counterLabel\n  +int _counter\n  +void incrementCounter()\n  +void showDialog()\n  +void showBottomSheet()\n}\n\nclass BaseViewModel\nHomeViewModel ..|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value and rebuilds the UI to reflect the new counter value.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Displays a custom dialog with a title, description, and a variant type.",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Displays a custom bottom sheet with a title, description, and a variant type.",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_viewmodel.dart",
      "description": "The `StartupViewModel` class is responsible for managing the initial startup logic of the application. It handles the initial setup and navigation to the main application view.",
      "class_diagram": "@startuml\nclass StartupViewModel {\n  - _navigationService: NavigationService\n  + runStartupLogic(): Future<void>\n}\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Executes the startup logic of the application, such as any necessary initializations or checks. After a short delay, it navigates the user to the main home view of the application.",
          "parameters": null,
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "package:my_app/app/app.locator.dart",
        "package:my_app/app/app.router.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/ui/views/startup/startup_view.dart",
      "description": "The `StartupView` is responsible for displaying an initial loading screen when the application starts up. It is part of the startup process and ensures a smooth transition for the user while the app's core functionality is being initialized.",
      "class_diagram": "@startuml\nclass StartupView {\n  +builder(BuildContext, StartupViewModel, Widget?): Widget\n  +viewModelBuilder(BuildContext): StartupViewModel\n  +onViewModelReady(StartupViewModel): void\n}\n\nclass StartupViewModel {\n  +runStartupLogic(): void\n}\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "Builds the UI for the startup screen, displaying a centered 'MyApp' title with a loading indicator.",
          "parameters": [
            "BuildContext",
            "StartupViewModel",
            "Widget?"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Creates an instance of the `StartupViewModel` to handle the startup logic.",
          "parameters": [
            "BuildContext"
          ],
          "return_type": "StartupViewModel"
        },
        {
          "name": "onViewModelReady",
          "description": "Called when the `StartupViewModel` is ready, triggering the execution of the startup logic.",
          "parameters": [
            "StartupViewModel"
          ],
          "return_type": null
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/scheduler.dart",
        "package:gap/gap.dart",
        "package:my_app/ui/views/startup/startup_viewmodel.dart",
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/utils/contact/contact_util.dart",
      "description": "The `ContactUtil` class provides utility functions for interacting with contacts, such as launching WhatsApp conversations and opening email clients. It abstracts away the platform-specific implementation details and provides a consistent API for these common contact-related tasks.",
      "class_diagram": "@startuml\nclass ContactUtil {\n  +static Future<void> launchWhatsApp(String phone, {String text = ''})\n  +static Future<void> launchEmail(String email)\n}\n@enduml",
      "methods": [
        {
          "name": "launchWhatsApp",
          "description": "Launches a WhatsApp conversation with the given phone number and optional text message.",
          "parameters": [
            "phone",
            "text"
          ],
          "return_type": "Future<void>"
        },
        {
          "name": "launchEmail",
          "description": "Launches the default email client with the given email address.",
          "parameters": [
            "email"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "dart:async",
        "dart:io",
        "package:url_launcher/url_launcher.dart"
      ]
    },
    {
      "name": "lib/utils/date/date_util.dart",
      "description": "The DateUtil class provides utility functions for working with date and time data in the application. It serves as a centralized place for handling various date/time conversion and formatting tasks.",
      "class_diagram": "@startuml\nclass DateUtil {\n  + static DateTime? fromJson(dynamic value)\n}\n@enduml",
      "methods": [
        {
          "name": "fromJson",
          "description": "Converts a dynamic input value (e.g., Timestamp, String, DateTime) to a DateTime object.",
          "parameters": [
            "dynamic value"
          ],
          "return_type": "DateTime?"
        }
      ],
      "dependencies": [
        "cloud_firestore/cloud_firestore.dart"
      ]
    },
    {
      "name": "lib/utils/exceptions/api_exception.dart",
      "description": "This file defines an exception class `APIException` that is used to handle and propagate errors that occur during API service interactions.",
      "class_diagram": "@startuml\nclass APIException implements Exception {\n  -dynamic message\n  +APIException(message)\n  +toString(): String\n}\n@enduml",
      "methods": [
        {
          "name": "APIException",
          "description": "Constructor for the `APIException` class. Accepts an optional `message` parameter that can be used to provide additional context about the exception.",
          "parameters": [
            "message"
          ],
          "return_type": null
        },
        {
          "name": "toString",
          "description": "Overrides the default `toString()` method to provide a string representation of the `APIException` instance, including the runtime type and the `message` property.",
          "parameters": [],
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a collection of utility functions and constants that help with the layout and styling of the user interface in a Flutter application. It contains a set of pre-defined spacing and font size values, as well as helper functions to easily calculate responsive sizes based on the screen dimensions.",
      "class_diagram": "@startuml\nclass UiHelpers {\n  + const horizontalSpaceTiny: Widget\n  + const horizontalSpaceSmall: Widget\n  + const horizontalSpaceMedium: Widget\n  + const horizontalSpaceLarge: Widget\n  + const verticalSpaceTiny: Widget\n  + const verticalSpaceSmall: Widget\n  + const verticalSpaceMedium: Widget\n  + const verticalSpaceLarge: Widget\n  + const verticalSpaceMassive: Widget\n  + const spacedDivider: Widget\n  + verticalSpace(double height): Widget\n  + screenWidth(BuildContext context): double\n  + screenHeight(BuildContext context): double\n  + screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000}): double\n  + halfScreenWidth(BuildContext context): double\n  + thirdScreenWidth(BuildContext context): double\n  + quarterScreenWidth(BuildContext context): double\n  + getResponsiveHorizontalSpaceMedium(BuildContext context): double\n  + getResponsiveSmallFontSize(BuildContext context): double\n  + getResponsiveMediumFontSize(BuildContext context): double\n  + getResponsiveLargeFontSize(BuildContext context): double\n  + getResponsiveExtraLargeFontSize(BuildContext context): double\n  + getResponsiveMassiveFontSize(BuildContext context): double\n  + getResponsiveFontSize(BuildContext context, {double? fontSize, double? max}): double\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny, horizontalSpaceSmall, horizontalSpaceMedium, horizontalSpaceLarge",
          "description": "Predefined horizontal spacing widgets with fixed sizes",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpaceTiny, verticalSpaceSmall, verticalSpaceMedium, verticalSpaceLarge, verticalSpaceMassive",
          "description": "Predefined vertical spacing widgets with fixed sizes",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "spacedDivider",
          "description": "A pre-built widget that includes a divider with vertical spacing around it",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "verticalSpace",
          "description": "Generates a vertical spacing widget with a custom height",
          "parameters": [
            "double height"
          ],
          "return_type": "Widget"
        },
        {
          "name": "screenWidth, screenHeight",
          "description": "Retrieves the width and height of the screen in the current context",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction, screenWidthFraction",
          "description": "Calculates a fraction of the screen's height or width, with optional offset and maximum value",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "halfScreenWidth, thirdScreenWidth, quarterScreenWidth",
          "description": "Calculates half, one-third, and one-quarter of the screen's width",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Calculates a responsive horizontal spacing value based on the screen width",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveSmallFontSize, getResponsiveMediumFontSize, getResponsiveLargeFontSize, getResponsiveExtraLargeFontSize, getResponsiveMassiveFontSize",
          "description": "Calculates responsive font sizes based on the screen width",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width, with optional maximum value",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/extensions/color_extension.dart",
      "description": "This Dart file provides a set of utility functions to work with colors, specifically by converting hex-coded color strings to Color objects and integer representations.",
      "class_diagram": "",
      "methods": [
        {
          "name": "fromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to a Color object.",
          "parameters": [
            "String hexColorString"
          ],
          "return_type": "Color"
        },
        {
          "name": "intFromHex",
          "description": "Converts a hexadecimal color string (e.g., '#FF0000' for red) to an integer representation of the color.",
          "parameters": [
            "String hexColorString"
          ],
          "return_type": "int"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/utils/json/json_util.dart",
      "description": "The `JsonUtil` class provides a set of utility functions for working with JSON data in a Dart/Flutter application. It serves as a centralized location for handling common JSON-related tasks, promoting code reuse and maintainability.",
      "class_diagram": "@startuml\nclass JsonUtil {\n  + static Map<String, dynamic> formatMap(Map<dynamic, dynamic>)\n  + static T? fromJsonOrNull<T>(dynamic, T Function(Map<String, dynamic>))\n  + static List<T> formatListMap<T>(List<dynamic>, T Function(Map<String, dynamic>))\n}\n@enduml",
      "methods": [
        {
          "name": "formatMap",
          "description": "Converts a dynamic `Map` to a strongly-typed `Map<String, dynamic>` by removing any keys that are `null`.",
          "parameters": [
            "Map<dynamic, dynamic> json"
          ],
          "return_type": "Map<String, dynamic>"
        },
        {
          "name": "fromJsonOrNull",
          "description": "Deserializes a JSON object to a given type `T`, returning `null` if the input is `null` or not a `Map`.",
          "parameters": [
            "dynamic json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "T?"
        },
        {
          "name": "formatListMap",
          "description": "Converts a list of dynamic JSON objects to a list of a given type `T` by applying the provided `fromJson` function to each element.",
          "parameters": [
            "List<dynamic> json",
            "T Function(Map<String, dynamic>) fromJson"
          ],
          "return_type": "List<T>"
        }
      ],
      "dependencies": [
        "dart:core",
        "dart:collection"
      ]
    },
    {
      "name": "lib/utils/flavors/flavors.dart",
      "description": "This Dart file defines a utility class called `Flavors` that manages the current app flavor (development or production) for the application.",
      "class_diagram": "@startuml\nclass Flavors {\n  + static Flavor? flavor\n  + static bool get isDev\n  + static bool get isProd\n  - Flavors._()\n  + factory Flavors()\n}\n@enduml",
      "methods": [
        {
          "name": "Flavors()",
          "description": "The factory constructor that returns the singleton instance of the Flavors class.",
          "parameters": null,
          "return_type": "Flavors"
        },
        {
          "name": "isDev",
          "description": "A static getter that returns true if the current app flavor is Flavor.development.",
          "parameters": null,
          "return_type": "bool"
        },
        {
          "name": "isProd",
          "description": "A static getter that returns true if the current app flavor is Flavor.production.",
          "parameters": null,
          "return_type": "bool"
        }
      ],
      "dependencies": [
        "package:my_app/models/enums/flavor.dart"
      ]
    },
    {
      "name": "lib/l10n/l10n.dart",
      "description": "This Dart file serves as the central hub for managing the localization and internationalization (i18n) functionality of the application. It provides access to the generated localization resources and extensions, as well as the supported locales.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter_gen/gen_l10n/app_localizations.dart",
        "lib/l10n/localizations_extension.dart",
        "lib/l10n/supported_locales.dart"
      ]
    },
    {
      "name": "lib/l10n/localizations_extension.dart",
      "description": "This file provides a convenient extension on the BuildContext that allows easy access to the current AppLocalizations instance. It simplifies the process of retrieving localized strings and content within the Flutter application.",
      "class_diagram": "@startuml\nclass BuildContext {\n}\n\nclass AppLocalizations {\n  + static AppLocalizations of(BuildContext context)\n}\n\nextension LocalizationsX on BuildContext {\n  + AppLocalizations get localizations\n}\n@enduml",
      "methods": [
        {
          "name": "get localizations",
          "description": "Retrieves the current AppLocalizations instance associated with the BuildContext.",
          "parameters": null,
          "return_type": "AppLocalizations"
        }
      ],
      "dependencies": [
        "flutter/widgets.dart",
        "flutter_gen/gen_l10n/app_localizations.dart"
      ]
    },
    {
      "name": "lib/config/production/firebase_options_production.dart",
      "description": "Firebase configuration file for production environment, defining specific Firebase configuration options for initializing Firebase services in the production deployment of the application",
      "class_diagram": "@startuml\nclass FirebaseOptionsProduction {\n  + DefaultFirebaseOptions\n  + productionConfig\n}\n@enduml",
      "methods": [
        {
          "name": "DefaultFirebaseOptions",
          "description": "Provides static Firebase configuration settings for the production environment",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "firebase_options"
      ]
    },
    {
      "name": "lib/config/development/firebase_options_development.dart",
      "description": "Configuration file for Firebase options specific to the development environment, which defines initialization settings for Firebase services during development stages",
      "class_diagram": "@startuml\nclass FirebaseOptionsDevelopment {\n  {static} +defaultFirebaseOptions\n}\n@enduml",
      "methods": [
        {
          "name": "defaultFirebaseOptions",
          "description": "Provides Firebase configuration options tailored for the development environment",
          "parameters": null,
          "return_type": "FirebaseOptions"
        }
      ],
      "dependencies": [
        "firebase_core",
        "flutter"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "A dependency injection and service locator configuration file that centralizes application-wide service registration and management using the Stacked architecture pattern",
      "class_diagram": "@startuml\nclass StackedLocator {\n  +registerLazySingleton()\n  +registerEnvironment()\n}\nnote right: Manages global service registration\n@enduml",
      "methods": [
        {
          "name": "setupLocator",
          "description": "Configures and registers core application services in a centralized dependency injection container",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/dialog/dialog_service.dart",
        "stacked_services/navigation/navigation_service.dart",
        "stacked_shared"
      ]
    },
    {
      "name": "lib/utils/const/const.dart",
      "description": "This Dart file contains a collection of constant values and configurations used throughout the application. It serves as a centralized location for managing and accessing global application settings and data that do not require any complex logic or processing.",
      "class_diagram": "",
      "methods": [],
      "dependencies": []
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nUser -> HomeView: Interact\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> HomeView: Update UI\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. The ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The state is managed within the ViewModels, and changes are propagated to the Views through the Stacked framework. The app.locator.dart file sets up the dependency injection, allowing the ViewModels to access necessary services and dependencies.",
  "navigation_flow": "The application's navigation is managed using the Stacked Router defined in app.router.dart. The entry point, main.dart, sets up the app and runs the AppView, which initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. User interactions within the HomeView are handled by the HomeViewModel, which can trigger navigation to other views or the display of dialogs and bottom sheets as needed."
}